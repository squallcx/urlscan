package main

import (
	"fmt"
	"io"
	"net/http"
	"os"
	"strings"
	"sync"
)

func check(err error) {
	if err != nil {
		fmt.Println(err)
		// panic(err)
	}
}

func savePage(filename string, resp *http.Response) {
	defer resp.Body.Close()
	out, err := os.Create(fmt.Sprintf("./get/%s.html", filename))
	if err != nil {
		// panic?
	}
	defer out.Close()
	io.Copy(out, resp.Body)
}

var ascii_lowercase = "abcdefghijklmnopqrstuvwxyz"
var lowercaseArray = strings.Split(ascii_lowercase, "")

func page(urlname string) {

	resp, err := http.Get(
		fmt.Sprintf("http://www.lazo.twmail.org/%s.html", urlname))
	check(err)
	defer resp.Body.Close()
	if resp.StatusCode != 404 {
		fmt.Println(urlname, resp.StatusCode)
		savePage(urlname, resp)
	}
}

func intToString(a int) string {

	b := []int{}
	for i := 1; i < a; i = i * 26 {
		b = append([]int{i}, b...) // prepend trick
	}

	o := []byte{}

	// make the original number
	for _, b := range b {
		o = append(o, 96+byte(a/b))
		a = a % b
	}
	return string(o)

}

func start(urlname string) {
	// for i := 0; i < 1; i++ {
	fullName := fmt.Sprintf("%s%02d", urlname, 1)
	// fmt.Println(fullName)
	page(fullName)
	// }

}

var wg sync.WaitGroup

func main() {
	var going int = 0
	for i := 10000; i < 1048576; i++ {
		numToURL := ""
		if i < 24 {
			numToURL = lowercaseArray[i]
		} else {
			numToURL = intToString(i)
		}
		fmt.Println(i, numToURL)
		wg.Add(1)
		go func(numToURL string) {
			defer wg.Done()
			start(numToURL)
		}(numToURL)

		going++
		if going == 100 {
			wg.Wait()
			going = 0
		}
	}
}
